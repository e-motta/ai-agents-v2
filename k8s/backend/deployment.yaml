apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: default
  labels:
    app.kubernetes.io/name: backend
    app.kubernetes.io/component: api
    app.kubernetes.io/version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: backend
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: backend
        app.kubernetes.io/component: api
        app.kubernetes.io/version: v1
    spec:
      initContainers:
        - name: wait-for-redis
          image: busybox:1.36
          command:
            [
              "sh",
              "-c",
              "until nc -z redis-service 6379; do echo 'Waiting for Redis...'; sleep 2; done; echo 'Redis is ready!'",
            ]
          resources:
            requests:
              memory: "32Mi"
              cpu: "10m"
            limits:
              memory: "64Mi"
              cpu: "50m"
        - name: fix-permissions
          image: busybox:1.36
          command:
            - sh
            - -c
            - |
              chown -R 1000:1000 /app/vector_store || true
              chmod -R 755 /app/vector_store || true
          volumeMounts:
            - name: vector-store
              mountPath: /app/vector_store
          securityContext:
            runAsUser: 0  # Run as root to fix permissions
      containers:
        - name: backend
          image: ai-agents-backend:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP

          envFrom:
            - configMapRef:
                name: app-config
            - secretRef:
                name: openai-secret

          env:
            - name: PYTHONPATH
              value: "/app"
            - name: VECTOR_STORE_PATH
              value: "/app/vector_store"

          startupProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 15
            periodSeconds: 5
            failureThreshold: 12

          livenessProbe:
            httpGet:
              path: /health
              port: http
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3

          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"

          volumeMounts:
            - name: vector-store
              mountPath: /app/vector_store # This MUST match VECTOR_STORE_PATH
            - name: tmp-volume
              mountPath: /tmp

          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
                - ALL

      volumes:
        - name: vector-store
          persistentVolumeClaim:
            claimName: backend-pvc
        - name: tmp-volume
          emptyDir: {}
