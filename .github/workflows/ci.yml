name: CI Pipeline

on:
  pull_request:
    branches: [main]
    paths:
      - "backend/**"
      - ".github/workflows/ci.yml"
      - "pyproject.toml"
      - "poetry.lock"

jobs:
  backend-quality-checks:
    name: Backend Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        working-directory: ./backend
        run: poetry install --with dev --no-interaction

      - name: Run Ruff and Mypy
        working-directory: ./backend
        run: |
          poetry run ruff check . --output-format=github
          poetry run ruff format --check .
          poetry run mypy app/ --ignore-missing-imports

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        working-directory: ./backend
        run: poetry install --with dev --no-interaction

      - name: Set up test environment variables
        run: |
          echo "OPENAI_API_KEY=dummy_key_for_testing" >> $GITHUB_ENV
          echo "REDIS_HOST=localhost" >> $GITHUB_ENV
          echo "REDIS_PORT=6379" >> $GITHUB_ENV
          echo "ENVIRONMENT=test" >> $GITHUB_ENV

      - name: Run Tests with Coverage
        working-directory: ./backend
        run: poetry run pytest --cov=app --cov-report=xml --cov-fail-under=60
